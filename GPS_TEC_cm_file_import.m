function [S1]=GPS_TEC_cm_file_import(PRN,t1,t2,stn,eq_la,eq_lo)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\PC\Documents\MATLAB\TEC\before1day\cn25250-2017-09-07.Cmn
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/11/20 14:37:49
%example: [cmbl317]=GPS_TEC_cm_file_import([5 13 14 18 20 21 29]',10.5,13.5,'cmbl317-2016-11-12');
% Inputs:
% PRN----> list of PRNs that contain TEC data as a vector (ex: [5 13 14 18
% 20 21 29]')
% t1, t2 --> starting and ending time ex: 10.5,13.5, (10.5 UTC to 13.5 UTC)
% stn ---> file name with path (without extension) ex: 'C:\Users\PC\Documents\MATLAB\TEC\before1day\cn25250-2017-09-07'
% eq_la and eq_lo are earthquake latitude and longitudes
% Output: S1--> table containing the filtered VTEC

%% Initialize variables.
%filename = [ 'Mexico_1Hz\' stn '.Cmn'] 
filename = [ stn '.Cmn'] 
delimiter = '\t';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells
Lat=cell2mat(raw(2,1));
Lon=cell2mat(raw(2,2));
Ele=cell2mat(raw(2,3));
raw(1:3,:)=[];
t=cell2mat(raw(:,2));
raw((t<t1|t>t2),:)=[];
t=cell2mat(raw(:,2));
ts=min(abs(diff(t)));
t=t1:ts:t2;
D=cell2mat(raw);

%% Clear temporary variables
k=1;

for i=1:length(PRN)
   try
   I=find(D(:,3)==PRN(i,1));
   if((length(I)*ts)>=1)
   S1(k).T=D(I,2);
   S1(k).Stec=D(I,8);
   S1(k).Vtec=D(I,9);
    if (min(diff(abs(S1(k).T)))>0.0084)
         [S1(k).Vtec]=N_filter(S1(k).Vtec,6,15,min(diff(S1(k).T)),1);
    else
         [S1(k).Vtec]=N_filter(S1(k).Vtec,6,20,min(diff(S1(k).T)),1);
    end
   S1(k).PRN= D(I(1,1),3);
   S1(k).Lat=Lat;
   S1(k).Lon=Lon;
   S1(k).Ele=Ele;
   S1(k).La=D(I,6);
   S1(k).Lo=D(I,7);
   S1(k).S4=D(I,10);
   for ii=1:length(S1(k).Lo)
   S1(k).Dist(ii,1)=dist_wh([eq_la, S1(k).La(ii,1)],[eq_lo, S1(k).Lo(ii,1)])/1000;
   S1(k).Dist4Eq(ii,1)=dist_wh([eq_la, S1(k).Lat],[eq_lo, S1(k).Lon])/1000;
   end
   k=k+1;
   end
   catch
   end
end
% [S1] = interpolate_gps(S1,0.0083);
% SaveTECFile_txt(S1,stn(1:7));
    
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;
end
function SaveTECFile_txt(data,name)
sz=length(data);
for i=1:sz
PRN=num2str(data(i).PRN)
filename= [ name '_' PRN 'Vtec.txt']
%filename1= [ name '_' PRN 'Stec.txt']
csvwrite(filename, [data(i).T data(i).Vtec]);
%csvwrite(filename1, [data(i).T data(i).Stec]);
end
end
function [seis]=N_filter(seis,f1,f2,Ts,Or)
    %Ts=1 ---> data sampling time 
    %f1,f2 ---> cutoff frequencies
    %seis ---> Input seismic data
    if(nargin<5)
    Or=4;
    end
    Fe=1/Ts;
    freq_int=[f1 f2];                             
    [BB,AA]=butter(Or,freq_int/(Fe/2));  
    for i=1:size(seis,2)
    seis(:,i)= filtfilt(BB,AA,seis(:,i));
    end
end